// text segment
Mem.cell['h00000000] = 32'h08000400;   // j 0x1000

Mem.cell['h00001000] = 32'h8c085000;   // lw $8, 20480($0) [A]            ; 8: lw      $8, A #load A
Mem.cell['h00001004] = 32'h8c095004;   // lw $9, 20484($0) [B]            ; 9: lw      $9, B #load B
Mem.cell['h00001008] = 32'h200a0001;   // addi $10, $0, 1                 ; 10: addi    $10, $0, 1 #bit演算用レジスタ
Mem.cell['h0000100c] = 32'h200b0000;   // addi $11, $0, 0                 ; 11: addi    $11, $0, 0 # i
Mem.cell['h00001010] = 32'h200c0010;   // addi $12, $0, 16                ; 12: addi    $12, $0, 16 # N
Mem.cell['h00001014] = 32'h200e0000;   // addi $14, $0, 0                 ; 13: addi    $14, $0, 0 # result
Mem.cell['h00001018] = 32'h116c0008;   // beq $11, $12, 32 [loopend-0x00001018]; 16: beq     $11, $12, loopend
Mem.cell['h0000101c] = 32'h010ac024;   // and $24, $8, $10                ; 17: and     $24, $8, $10
Mem.cell['h00001020] = 32'h13000002;   // beq $24, $0, 8 [cal-0x00001020] ; 18: beq     $24, $0, cal
Mem.cell['h00001024] = 32'h01c97020;   // add $14, $14, $9                ; 19: add     $14, $14, $9
Mem.cell['h00001028] = 32'h0800040b;   // j 0x0000102c [cal]              ; 20: j       cal
Mem.cell['h0000102c] = 32'h216b0001;   // addi $11, $11, 1                ; 23: addi    $11, $11, 1
Mem.cell['h00001030] = 32'h014a5020;   // add $10, $10, $10               ; 24: add     $10, $10, $10
Mem.cell['h00001034] = 32'h01294820;   // add $9, $9, $9                  ; 25: add     $9, $9, $9
Mem.cell['h00001038] = 32'h08000406;   // j 0x00001018 [loop]             ; 26: j       loop
Mem.cell['h0000103c] = 32'hac0e5008;   // sw $14, 20488($0) [C]           ; 29: sw      $14, C
Mem.cell['h00001040] = 32'h08000410;   // j 0x00001040 [exit]             ; 32: j       exit

// data segment
Mem.cell['h00005000] = 32'h000004d2;
Mem.cell['h00005004] = 32'h0000223d;
Mem.cell['h00005008] = 32'h00000000;

